{"version":3,"sources":["scripts.js"],"names":["countDown","count_down_interval","close_button","document","getElementById","menu_links","querySelector","array_of_slider_id","glide_slider_options","type","perView","autoplay","breakpoints","992","768","567","current_year","header_angle_down","hero_header_index_page","podcast_ids","querySelectorAll","podcast_container","festival_days","festival_hours","festival_minutes","festival_seconds","setWindowHeight","window_height","window","innerHeight","nav_height","clientHeight","style","height","concat","player_pause","play_btn","pause_btn","sound_id","classList","contains","remove","add","play","pause","formatTime","secs","minutes","Math","floor","seconds","round","onclick","event","this","toggle","stopPropagation","addEventListener","target","scrollIntoView","behavior","SimpleBar","forEach","slider_id","temp","Glide","mount","sounds_ids","index","length","volume_input","volume_label","progress_bar","volume_size","animate_bar","seek","inner_progress_bar","textContent","width","duration","dataset","tooltip","playing","requestAnimationFrame","bind","Howl","src","url","html5","volume","onend","onload","onplay","value","_loop","Date","getFullYear","toString","getTime","setInterval","now","distance","hour","minute","second"],"mappings":"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","file":"scripts.min.js","sourcesContent":["\n// Needed variables\nconst close_button = document.getElementById('js-menu-toggle'),\n    menu_links = document.querySelector('#main-links ul'),\n    array_of_slider_id = ['js-up-coming-events'],\n    glide_slider_options = {\n        type: 'carousel',\n        perView: 3,\n        autoplay: 5000,\n        breakpoints: {\n            992: {\n                perView: 2,\n            },\n            768: {\n                perView: 2,\n            },\n            567: {\n                perView: 1,\n            },\n        },\n    },\n    current_year = document.getElementById('js-current-year'),\n    header_angle_down = document.querySelector('header .angle-down '),\n    hero_header_index_page = document.getElementById('js-header'),\n    podcast_ids = document.querySelectorAll('.single-music-container'),\n    podcast_container = document.getElementById('js-simple-bar-scroll'),\n    festival_days = document.getElementById('js-days'),\n    festival_hours = document.getElementById('js-hours'),\n    festival_minutes = document.getElementById('js-minutes'),\n    festival_seconds = document.getElementById('js-seconds');\n\n// Toggle menu on navbar\n\nclose_button.onclick = function (event) {\n    'use strict';\n    this.classList.toggle('open');\n    menu_links.classList.toggle('open');\n    event.stopPropagation();\n};\n\nmenu_links.onclick = function (event) {\n    'use strict';\n    event.stopPropagation();\n};\n\n\ndocument.addEventListener('click', event => {\n    'use strict';\n    const event_condition = event.target !== menu_links\n        && event.target !== close_button\n        && menu_links.classList.contains('open');\n\n    if (event_condition) {\n        menu_links.classList.toggle('open');\n        close_button.classList.toggle('open');\n    }\n});\n\n\nif (header_angle_down) {\n    header_angle_down.onclick = function () {\n        'use strict';\n        document.querySelector('#js-up-coming-events').scrollIntoView({\n            behavior: 'smooth',\n        });\n    };\n}\n\n// Podcast Slider\n\nif (podcast_container) {\n    new SimpleBar(podcast_container);\n}\n\n// Glide slider\n\narray_of_slider_id.forEach(slider_id => {\n    'use strict';\n    const temp = document.getElementById(slider_id);\n    if (temp) {\n        new Glide(temp, glide_slider_options).mount();\n    }\n});\n\nfunction setWindowHeight() {\n    'use strict';\n    const window_height = window.innerHeight,\n        nav_height = document.querySelector('nav').clientHeight;\n    hero_header_index_page.style.height = `${window_height - nav_height}px`;\n}\n\nif (hero_header_index_page) {\n    window.addEventListener('resize', setWindowHeight, false);\n    setWindowHeight();\n}\n\n// Music player 'howler'\nif (podcast_ids) {\n    const sounds_ids = [];\n\n    for (let index = 0; index < podcast_ids.length; index ++) {\n        const play_btn = podcast_ids[index].querySelector('.player-btn .play'),\n            pause_btn = podcast_ids[index].querySelector('.player-btn .pause'),\n            volume_input = podcast_ids[index].querySelector('.sound-controller .volume-changer'),\n            volume_label = podcast_ids[index].querySelector('.sound-controller .volume-label'),\n            progress_bar = podcast_ids[index].querySelector('.play-bar .bar-slider'),\n            volume_size = podcast_ids[index].querySelector('.sound-controller .volume-size');\n        sounds_ids[index] = new Howl({\n            src: [podcast_ids[index].dataset.url],\n            html5: true,\n            volume: 0.5,\n            onend: function () {\n                'use strict';\n                player_pause(play_btn, pause_btn, sounds_ids[index]);\n            },\n            onload: function () {\n                'use strict';\n                podcast_ids[index].querySelector('.play-bar .duration').textContent = formatTime(sounds_ids[index].duration());\n            },\n            onplay: function () {\n                'use strict';\n                requestAnimationFrame(animate_bar.bind(this));\n            },\n        });\n\n        play_btn.addEventListener('click', () => {\n            'use strict';\n            // for (let podcast = 0; podcast < podcast_ids.length; podcast++) {\n            //     const play_button = podcast_ids[podcast].querySelector('.player-btn .play'),\n            //         paue_button = podcast_ids[podcast].querySelector('.player-btn .pause');\n            //     if (sounds_ids[index].playing()) {\n            //         if (!play_button.classList.contains('active')) {\n            //             paue_button.classList.remove('active');\n            //             play_button.classList.add('active');\n            //         }\n            //         sounds_ids[index].stop();\n            //     }\n            //     // if (!play_button.classList.contains('active')) {\n            //     //     paue_button.classList.remove('active');\n            //     //     play_button.classList.add('active');\n            //     // }\n            //     // console.log(sounds_ids[index].playing());\n            // }\n            player_pause(play_btn, pause_btn, sounds_ids[index]);\n        });\n        volume_input.addEventListener('input', () => {\n            'use strict';\n            volume_label.dataset.tooltip = volume_size.textContent = volume_input.value + '%';\n            sounds_ids[index].volume(volume_input.value / 100);\n        });\n        function animate_bar() {\n            'use strict';\n            let seek = sounds_ids[index].seek(),\n                inner_progress_bar = podcast_ids[index].querySelector('.play-bar .bar.bar-slider .bar-item');\n\n            podcast_ids[index].querySelector('.play-bar .seek').textContent = formatTime(seek);\n\n            inner_progress_bar.style.width = (((seek / this.duration()) * 100) || 0) + '%';\n\n            progress_bar.dataset.tooltip = Math.round(((seek / this.duration()) * 100) || 0) + '%';\n\n            if (this.playing()) {\n                requestAnimationFrame(animate_bar.bind(this));\n            }\n        }\n    }\n}\n\nfunction player_pause(play_btn, pause_btn, sound_id) {\n    'use strict';\n    if (play_btn.classList.contains('active')) {\n        play_btn.classList.remove('active');\n        pause_btn.classList.add('active');\n        sound_id.play();\n    } else {\n        pause_btn.classList.remove('active');\n        play_btn.classList.add('active');\n        sound_id.pause();\n    }\n}\n\n/**\n * Format the time from seconds to M:SS.\n * @param  {Number} secs Seconds to format.\n * @return {String}      Formatted time.\n */\nfunction formatTime(secs) {\n    'use strict';\n    const minutes = Math.floor(secs / 60) || 0,\n        seconds = Math.round(secs - (minutes * 60)) || 0;\n    return minutes + ':' + (seconds < 10 ? '0' : '') + seconds;\n}\n\n// Show current year on footer\ncurrent_year.textContent = new Date().getFullYear().toString();\n\n// --------------------- Preloader  ---------------------\n\n// $(window).on('load', function () {\n//     $(\".loader\").fadeOut();\n//     $('body').delay(2000).css('overflow', 'auto');\n//     $(\"#loading\").delay(100).fadeOut(\"slow\");\n// });\n\n// window.addEventListener('load', (event) => {\n//     console.log('loading');\n// });\n\n// document.addEventListener('DOMContentLoaded', (event) => {\n//     console.log('done');\n// });\n\n\nif (festival_days\n    && festival_hours\n    && festival_minutes\n    && festival_seconds) {\n    let countDown = new Date('13 nov 2022 00:00:00').getTime(),\n        count_down_interval = setInterval(function () {\n            'use strict';\n            const now = new Date().getTime(),\n                distance = countDown - now,\n                second = 1000,\n                minute = second * 60,\n                hour = minute * 60,\n                day = hour * 24;\n\n            festival_days.textContent = Math.floor(distance / (day));\n            festival_hours.textContent = Math.floor((distance % (day)) / (hour));\n            festival_minutes.textContent = Math.floor((distance % (hour)) / (minute));\n            festival_seconds.textContent = Math.floor((distance % (minute)) / second);\n\n            //Do something later when date is reached\n            if (distance < 0) {\n                // clearInterval(count_down_interval);\n                countDown = new Date('13 nov 2025 00:00:00').getTime();\n            }\n        }, 1000);\n\n}\n"]}